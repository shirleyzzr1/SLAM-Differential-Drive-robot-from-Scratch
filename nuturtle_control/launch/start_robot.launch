<launch>
  <!--this arg can be 'circle', 'teleop','none'-->
  <arg name = "cmd_src" default="circle" />
  <!--the arg can be 'nusim', 'localhost','<turtlebotname>','none'-->
  <arg name = "robot" default= "nusim"/>
  <arg name = "use_rviz" default = 'false'/>
  <arg name = "frequency" default = "10" />
  <arg name = "odom_id" default = "odom" />
  <arg name = "use_jsp" default = 'false' />
  <!-- <arg name = "x_length" default = "3"/>
  <arg name = "y_length" default = "3"/>
  <arg name = "~x0" default="1"/>
  <arg name = "~y0" default="0"/>
  <arg name = "~theta0" default  = "0"/>
  <arg name = "~rate" default = "50"/> -->

  <!--the transform odom_id and body_id in odometry-->
  <param name = "odom_id" value = "$(arg odom_id)"/>
  <param name = "body_id" value = "blue/base_footprint" />
  <!--the name of the joint of blue robot-->
  <param name = "wheel_left" value = "blue/wheel_left_joint"/>
  <param name = "wheel_right" value = "blue/wheel_right_joint" /> 

  <!-- load yaml file into rosparam -->
  <rosparam command="load" file="$(find nuturtle_description)/config/diff_params.yaml" />
  <rosparam command="load" file="$(find nusim)/config/basic_world.yaml" />
  <rosparam command="load" file="$(find nusim)/config/fake_lidar.yaml" />
  <!--include basic_remote.launch to run code on turtlebot3-->
  <include file = "$(find nuturtle_control)/launch/basic_remote.launch" if="$(eval arg('robot') != 'nusim')">
    <arg name="robot" value="$(arg robot)"/>
  </include>
  <!--load rviz is use_rivz is set to true-->
  <node name="rviz" pkg="rviz" type="rviz" args="-d $(find nuturtle_control)/rviz/nuturtle_control.rviz" 
        if="$(eval arg('use_rviz') == true)"/>

  <!--draw the circle -->
  <node name="circle" pkg="nuturtle_control" type="circle"  
      if="$(eval arg('cmd_src') == 'circle')">
        <param name = "frequency" value = "$(arg frequency)"/>
  </node>

  <node name="turtle_interface" pkg="nuturtle_control" type="turtle_interface"/>
  <!-- <node name="turtle_interface_two" pkg="nuturtle_control" type="turtle_interface_two" if="$(eval arg('robot') != 'nusim')" /> -->

  <node name="odometry" pkg="nuturtle_control" type="odometry" output="screen"/> 

  <!--use teleop to control the robot-->
  <node name="turtlebot3_teleop_key" pkg="turtlebot3_teleop" type="turtlebot3_teleop_key" output="screen"
      if="$(eval arg('cmd_src') == 'teleop')"/>

  <node name="nusim" pkg="nusim" type="nusim"  output="screen"
      if="$(eval arg('robot') == 'nusim')">

  </node>
  <!--group of blue robot-->
  <group ns = "blue">
  <!--load the urdf into the parameter server-->
  <param name="robot_description" command="xacro '$(find nuturtle_description)/urdf/turtlebot3_burger.urdf.xacro' color:=blue"/>

  <!-- The robot_state_publisher reads the urdf from /robot_description parameter
      and listens to joint information on the /joint_states topic -->
  <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher"/>

  </group>
  <group ns = "red">
  <!--load the urdf into the parameter server-->
  <param name="robot_description" command="xacro '$(find nuturtle_description)/urdf/turtlebot3_burger.urdf.xacro' color:=red"/>

  <!-- The robot_state_publisher reads the urdf from /robot_description parameter
      and listens to joint information on the /joint_states topic -->
  <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher"/>

  <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher" if="$(eval arg('robot') == 'nusim')"/>
  </group>



  <!--publish a static transform from world to odom-->
  <node pkg="tf" type="static_transform_publisher" name="red_broadcaster" args="0 0 0 0 0 0 1 world odom 100"/>



</launch>