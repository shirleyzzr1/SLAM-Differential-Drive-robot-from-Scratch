<launch>

  <arg name = "robot" default="nusim"/>
  <arg name = "use_rviz" default='false'/>
  <arg name = "cmd_src" default="teleop" />
  <arg name = "ekf" default="true"/>
  <!--the name of the joint of blue robot-->
  <param name = "wheel_left" value = "blue/wheel_left_joint"/>
  <param name = "wheel_right" value = "blue/wheel_right_joint" /> 

  <!-- load yaml file into rosparam -->
  <rosparam command="load" file="$(find nusim)/config/basic_world.yaml" />
  <rosparam command="load" file="$(find nuturtle_description)/config/diff_params.yaml" />
  <rosparam command="load" file="$(find nusim)/config/fake_lidar.yaml" />
  <rosparam command="load" file="$(find nuslam)/config/nuslam.yaml" />

  <!--convert the sensor_data and cmd_vel to wheel_cmd and joint_states-->
  <node name="turtle_interface" pkg="nuturtle_control" type="turtle_interface"  />

  <!--the simulation robot world-->
  <node name = "nusim" pkg="nusim" type="nusim" output="screen" if="$(eval arg('robot') == 'nusim')"/>
  <node name = "landmarks" pkg ="nuslam" type = "landmarks"/> 
  <!--nuslam node for ekf-->
  <node name = "ekf" pkg="nuslam" type="ekf" output="screen" if="$(eval arg('ekf') == true)"/>

  <!--control the robot to run in a circle-->
  <node name = "circle" pkg="nuturtle_control" type="circle" if="$(eval arg('cmd_src') == 'circle')">
    <param name = "frequency" value = "500"/>
  </node>

  <!--use teleop to control the robot-->
  <node name="turtlebot3_teleop_key" pkg="turtlebot3_teleop" type="turtlebot3_teleop_key" output="screen"
      if="$(eval arg('cmd_src') == 'teleop')"/>

  <!--group of blue robot-->
  <group ns = "blue">
    <!--load the urdf into the parameter server-->
    <param name="robot_description" command="xacro '$(find nuturtle_description)/urdf/turtlebot3_burger.urdf.xacro' color:=blue"/>
    <!-- The robot_state_publisher reads the urdf from /robot_description parameter
        and listens to joint information on the /joint_states topic -->
    <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher"/>
  </group>

  <!--group of red robot-->
  <group ns = "red">
    <!--load the urdf into the parameter server-->
    <param name="robot_description" command="xacro '$(find nuturtle_description)/urdf/turtlebot3_burger.urdf.xacro' color:=red"/>

    <!-- The robot_state_publisher reads the urdf from /robot_description parameter
        and listens to joint information on the /joint_states topic -->
    <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher"/>

    <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher"/>
  </group>

  <!--group of red robot-->
  <group ns = "green">
    <!--load the urdf into the parameter server-->
    <param name="robot_description" command="xacro '$(find nuturtle_description)/urdf/turtlebot3_burger.urdf.xacro' color:=green"/>
    <!-- The robot_state_publisher reads the urdf from /robot_description parameter
        and listens to joint information on the /joint_states topic -->
    <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher"/>
    <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher"/>

  </group>

  <!--load rviz is use_rivz is set to true-->
  <node name="rviz" pkg="rviz" type="rviz" args="-d $(find nuslam)/rviz/nuslam.rviz" 
        if="$(eval arg('use_rviz') == true)"/>
  <!--publish a static transform from world to odom-->
  <node pkg="tf" type="static_transform_publisher" name="green_broadcaster" args="0 0 0 0 0 0 1 world map 100"/>

</launch>